const : (u : Level) -> (A : Type u) -> A -> A -> A :=
	_ => _ => x => _ => x;

quoteClosureTest : (u : Level) -> (A : Type u) -> (x : A) -> (b : (A -> A) -> Type u) -> b (const u A x) :=
	u => A => test => b => ?;

#Id : (u : Level) -> Type u -> Type u :=
  u => A => A;
#Id.mk : (u : Level) -> (A : Type u) -> A -> Id u A :=
  u => A => x => Eq.elim (lSucc u) u (Type u -> Type u) (A => A) (i => h => i A) x (Id u) (Id.eq u);
#Id.out : (u : Level) -> (A : Type u) -> Id u A -> A :=
  u => A => Eq.elim (lSucc u) u (Type u -> Type u) (A => A) (i => h => i A -> A) (x => x) (Id u) (Id.eq u);
Id.outMk : (u : Level) -> (A : Type u) -> (x : A) -> Eq u A x (Id.out u A (Id.mk u A x)) :=
  u => A => x =>
    Eq.elim (lSucc u) u ((A : Type u) -> Id u A -> A) (A => Eq.elim (lSucc u) u (Type u -> Type u) (A => A) (i => h => i A -> A) (x => x) (Id u) (Id.eq u)) (o => h => Eq u A x (o A (Id.mk u A x)))
      (Eq.elim (lSucc u) u ((A : Type u) -> A -> Id u A) (A => x => Eq.elim (lSucc u) u (Type u -> Type u) (A => A) (i => h => i A) x (Id u) (Id.eq u)) (m => h => Eq u A x (Eq.elim (lSucc u) u (Type u -> Type u) (A => A) (i => h => i A -> A) (x => x) (Id u) (Id.eq u) (m A x)))
        (Eq.elim (lSucc u) u (Type u -> Type u) (A => A) (i => h => Eq u A x (Eq.elim (lSucc u) u (Type u -> Type u) (A => A) (i => h => i A -> A) (x => x) i h (Eq.elim (lSucc u) u (Type u -> Type u) (A => A) (i => h => i A) x i h))) (refl u A x) (Id u) (Id.eq u))
      (Id.mk u) (Id.mk.eq u))
    (Id.out u) (Id.out.eq u);